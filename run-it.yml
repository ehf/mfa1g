---

## run "source env.sh" before running run-it.yml

# Example command:
# ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt run-it.yml -b -u $USER --vault-password-file ~/.ogpw


# Example ldapsearch command:
#  ldapsearch -x -b 'dc=usdata,dc=link' '(objectclass=*)'
#

# the following should be installed on the host running the Ansible playbook:
## 1. ansible collections and roles per requirements.yml (this is done with "source env.sh")
## 2. create ~/.ogpw for making it easier to work with Ansible vault (use ansible-vault)
## 3. encrypt ldap_bind auth with Ansible vault; store string in group_vars/all.yml
## 4. update inventory.txt to match the environment being updated 
## 5. run "export ANSIBLE_HOST_KEY_CHECKING=False" or prepend "ANSIBLE_HOST_KEY_CHECKING=False" to Ansible command being issued


# fetch data from "enrollment" host
- name: "Fetch auth data"
  hosts: enrollment_host
  vars:
    ansible_python_interpreter: /usr/bin/python3
  gather_facts: true
  roles:
    - { role: fetch-auth-data, tags: fetch-auth-data }

# run commands locally, from the ansible host
- name: "Deploy auth data"
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: /usr/bin/python3
  gather_facts: true
  roles:
    - { role: deploy-auth-data, tags: deploy-auth-data }

# distribute to hosts where applicable
- name: "Distribute totp data"
  hosts: sssd_client
  vars:
    ansible_python_interpreter: /usr/bin/python3
  gather_facts: true
  roles:
    - { role: dist-totp-data, tags: dist-totp-data }

- name: "Enable sss_ssh_authorizedkeys use"
  hosts: sssd_client
  vars:
    ansible_python_interpreter: /usr/bin/python3
  gather_facts: true
  roles:
    - { role: enable-sshd-ldap-authkeys, tags: enable-sss-authkeys }
